#Se importan las librerias
from flask import Flask, render_template, request, redirect, url_for, flash
from config import config
from flask_mysqldb import MySQL
from flask_login import LoginManager, login_user, logout_user, login_required

#Models
from models.modelsUser import modelsUser
from models.modelsPaciente import modelsPaciente

#Entities
from models.entities.user import Usuarios
from models.entities.paciente import Paciente


#Inicializamos la app
app = Flask(__name__)

#Conección a la database
db = MySQL(app)

login_manager_app=LoginManager(app)

@login_manager_app.user_loader
def load_user(id_usuarios):
    user_model = modelsUser(db) # Pasamos la instancia de MySQL
    return user_model.get_by_id(id_usuarios)

#Redireccion desde la url base a la url login
@app.route('/')
def index():
    return redirect (url_for('login'))

#URL Login
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        # La clase Usuarios lo recibe como el parámetro 'password'.
        usuario_ingresado = Usuarios(0, request.form['usuario'], request.form['password'])
        user_model = modelsUser(db) # Pasamos la instancia de MySQL
        logged_user = user_model.login(usuario_ingresado)
        
        if logged_user is not None:
                if logged_user.password: 
                    login_user(logged_user)
                    return redirect(url_for('bms'))
                else:
                    flash("Contraseña incorrecta.")
                    return render_template('autentication/login.html')
        else:
            flash("Usuario no encontrado.")
            return render_template('autentication/login.html')
    else:
        return render_template('autentication/login.html')


@app.route('/logout')
@login_required # Solo un usuario logueado puede desloguearse
def logout():
    logout_user()
    return redirect(url_for('login'))


#Ruta a la pagina principal
@app.route('/bms')
@login_required
def bms():
    return render_template('bms.html')


#Ruta de registro de usuarios
@app.route('/registroUsuario', methods=['GET', 'POST'])
def registroUsuario():
    if request.method == 'POST':
        usuario = request.form['usuario']
        password = request.form['password']
        fullname = request.form['fullname']

        user_model = modelsUser(db)
        if user_model.registroUsuario(usuario, password, fullname):
            flash("Usuario registrado exitosamente.")
            return redirect(url_for("login"))
        else:
            flash("Error al registrar usuario.")
            return render_template("autentication/registroUsuario.html")
    else:
        return render_template('autentication/registroUsuario.html')

# Ruta para el registro de pacientes (maneja GET y POST)
@app.route('/registroPacientes', methods=['GET', 'POST'])
@login_required
def registroPacientes():
    paciente_model = modelsPaciente(db)
    user_model = modelsUser(db)

    if request.method == 'POST':
        # Obtener datos del formulario
        # Es crucial que todos los campos estén dentro del mismo <form> en el HTML
        # Los campos que no son de texto como radio buttons o select boxes
        # deben manejarse con .get() si no son obligatorios o para evitar KeyError
        nombre = request.form['nombre']
        apellido = request.form['apellido']
        nroCedula = request.form['nroCedula']
        genero = request.form.get('genero') # Usar .get() para radio buttons
        fechaNacimiento = request.form['fechaNacimiento']
        direccion = request.form['direccion']
        diagnostico = request.form.get('diagnostico') # Campo de texto, puede ser None
        remision = request.form.get('remision') # Select box, puede ser None
        elaborado_por_id = request.form.get('elaborado') # ID del usuario seleccionado

        # Puedes añadir más campos según tu HTML para enfermedades, antecedentes, tratamiento
        # Por ejemplo:
        # fiebre = request.form.get('fiebre')
        # diabetes = request.form.get('diabetes')
        # etc.

        if not (nombre and apellido and nroCedula and genero and fechaNacimiento and direccion):
            flash("Por favor, complete todos los campos obligatorios para el registro del paciente.")
            # Si faltan datos, volvemos a renderizar el formulario con los datos pre-rellenados
            last_id = paciente_model.get_last_paciente_id()
            next_id = last_id + 1
            usuarios = user_model.get_all_users()
            return render_template('registroPaciente.html', next_id=next_id, usuarios=usuarios)

        try:
            # Aquí llamamos al método para registrar el paciente en la base de datos
            # Asegúrate de que tu método regisroPaciente en modelsPaciente.py
            # pueda manejar todos los campos que quieres guardar.
            # Por ahora, solo guardamos los datos personales básicos.
            # Si quieres guardar diagnostico, remision, etc.,
            # deberías añadirlos como parámetros a regisroPaciente o a otro método.
            paciente_model.regisroPaciente(nombre, apellido, nroCedula, genero, fechaNacimiento, direccion)
            flash("Paciente registrado exitosamente.")
            return redirect(url_for("listaPacientes")) # Redirige a la lista de pacientes
        except Exception as e:
            flash(f"Error al registrar paciente: {e}")
            # Si hay un error, vuelve a cargar el formulario con los datos necesarios
            last_id = paciente_model.get_last_paciente_id()
            next_id = last_id + 1
            usuarios = user_model.get_all_users()
            return render_template('registroPaciente.html', next_id=next_id, usuarios=usuarios)

    else: # GET request
        last_id = paciente_model.get_last_paciente_id()
        next_id = last_id + 1
        usuarios = user_model.get_all_users() # Obtener usuarios para el dropdown "Elaborado por"
        return render_template('registroPaciente.html', next_id=next_id, usuarios=usuarios)

# Ruta para listar pacientes (anteriormente /consultas)
@app.route('/listaPacientes')
@login_required
def listaPacientes():
    paciente_model = modelsPaciente(db)
    pacientes = paciente_model.obtenerPacientes()
    return render_template('listaPacientes.html', pacientes=pacientes)

# Ruta para la búsqueda de pacientes
@app.route('/buscarPaciente', methods=['GET', 'POST'])
@login_required
def buscarPaciente():
    paciente_encontrado = None
    busqueda_realizada = False
    if request.method == 'POST':
        busqueda = request.form['busqueda']
        if busqueda:
            paciente_model = modelsPaciente(db)
            paciente_encontrado = paciente_model.buscarPaciente(busqueda)
            busqueda_realizada = True
            if not paciente_encontrado:
                flash("No se encontró ningún paciente con el número de historia o cédula proporcionado.")
        else:
            flash("Por favor, ingrese un número de historia o cédula para buscar.")
    # La página de búsqueda de pacientes debería ser 'buscarPaciente.html'
    return render_template('buscarPaciente.html', paciente_encontrado=paciente_encontrado, busqueda_realizada=busqueda_realizada)

@app.route('/tratamientos')
@login_required
def tratamientos():
    return render_template('tratamientos.html')

# Se eliminó la ruta '/usuarios' que causaba el conflicto.
# Si necesitas una ruta para gestionar usuarios, crea una nueva función y un nuevo HTML.
# Ejemplo:
# @app.route('/gestionUsuarios')
# @login_required
# def gestionUsuarios():
#     user_model = modelsUser(db)
#     usuarios = user_model.get_all_users()
#     return render_template('gestionUsuarios.html', usuarios=usuarios)


if __name__ == '__main__':
    app.config.from_object(config['development'])
    app.run(debug=True) # Siempre es buena idea usar debug=True durante el desarrollo